#pragma once

#ifndef _INSTRUCTION_
#define _INSTRUCTION_

#include <stdbool.h>
#include <stdint.h>
#include "68000.h"
#include "common.h"

typedef UNK_8* INSTRUCTION_FUNCTION(INSTRUCTION);
typedef UNK_8* CONDITION_FUNCTION(CONDITION);

typedef struct CONDITION;
typedef struct INSTRUCTION;
typedef struct CPU;
typedef struct OPERAND;

typedef struct
{
	typedef UNK_8* NAME;
	typedef INSTRUCTION_FUNCTION* FUNCTION;
	INSTRUCTION_SIZE SIZE;
	OPCODE* OP;

	CONDITION* CONDITION;
	OPERAND* OPERAND_SRC;
	OPERAND* OPERAND_DEST;
	
} INSTRUCTION;

typedef struct
{
	CONDITION_FUNCTION* FUNCTION{};

} CONDITION;

/* TYPE DEFINED METHODS USING THE VALUES ASSIGNED IN THE STRUCTURES */
/* USING POINTER NOTATION TO CREATE, DESTROY, FREE AND ALLOCATE INSTRUCTION */
/* AND CONDITION MODES */

INSTRUCTION* CREATE_INSTRUCTION(INSTRUCTION::NAME, INSTRUCTION::FUNCTION);
INSTRUCTION* OPCODE_RELEVANCE(OPCODE);
CONDITION* CREATE_CONDITION();
OPCODE* OPCODE_TABLE;

/* PARAMS FOR INSTRUCTRION EXECUTION AND IMPLMENTATION */

typedef uint8_t INSTRUCTION_EXE(INSTRUCTION*, struct CPU*);
typedef uint8_t INSTRUCTION_NONE(INSTRUCTION*, struct CPU*);

#endif
