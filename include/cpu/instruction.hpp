#pragma once

#ifndef _INSTRUCTION_
#define _INSTRUCTION_

#include <stdbool.h>
#include <stdint.h>
#include "68000.h"

#define INSTRUCTION_FUNCTION typedef uint8_t
#define INSTRUCTION_NAME char*
#define OPCODE uint16_t
#define BASE_CPU_CYCLES typedef uint8_t
#define CONDITION_FUNCTION typedef bool
#define CONDITION_MNEMONICS typedef char
#define CONDITION_PATTERN unsigned int

struct CONDITION;
struct INSTRUCTION;
struct CPU;
struct OPERAND;

typedef struct
{
	INSTRUCTION_NAME* NAME;
	INSTRUCTION_FUNCTION* FUNCTION;
	INSTRUCTION_SIZE SIZE;
	OPCODE* OP;

	CONDITION* CONDITION;
	OPERAND* OPERAND_SRC;
	OPERAND* OPERAND_DEST;
	
} INSTRUCTION;

typedef struct
{
	CONDITION_FUNCTION* FUNCTION;
	CONDITION_MNEMONICS* MNEMONICS;

} CONDITION;

/* TYPE DEFINED METHODS USING THE VALUES ASSIGNED IN THE STRUCTURES */
/* USING POINTER NOTATION TO CREATE, DESTROY, FREE AND ALLOCATE INSTRUCTION */
/* AND CONDITION MODES */

INSTRUCTION* CREATE_INSTRUCTION(INSTRUCTION_NAME, INSTRUCTION::FUNCTION);
INSTRUCTION* OPCODE_RELEVANCE(OPCODE);
CONDITION* CREATE_CONDITION(CONDITION_PATTERN);

/* PARAMS FOR INSTRUCTRION EXECUTION AND IMPLMENTATION */

typedef uint8_t INSTRUCTION_EXE(INSTRUCTION*, struct CPU*);
typedef uint8_t INSTRUCTION_NONE(INSTRUCTION*, struct CPU*);

#endif
